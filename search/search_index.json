{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o","text":""},{"location":"#bem-vindo","title":"Bem-vindo","text":"<p>Este \u00e9 o guia para entender e utilizar nossa plataforma de e-commerce, constru\u00edda com as tecnologias mais modernas da AWS. Aqui voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es detalhadas sobre cada recurso e como eles se integram para criar uma experi\u00eancia de compra online excepcional.</p>"},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Nossa loja virtual \u00e9 uma solu\u00e7\u00e3o para gerenciar seus produtos, pedidos, clientes e muito mais. Utilizamos uma arquitetura escal\u00e1vel e confi\u00e1vel na AWS, garantindo alta disponibilidade e desempenho para seus clientes.</p> <p>Principais recursos:</p> <ul> <li>Gerenciamento de produtos: Cadastre, edite e organize seus produtos de forma f\u00e1cil e intuitiva.</li> <li>Gerenciamento de pedidos: Acompanhe o status dos pedidos, processe pagamentos e gerencie envios.</li> <li>Sistema de autentica\u00e7\u00e3o: Garanta a seguran\u00e7a dos dados dos seus clientes com autentica\u00e7\u00e3o robusta.</li> <li>Gerenciamento de eventos: Integre diferentes partes da sua loja e crie fluxos de trabalho automatizados.</li> </ul>"},{"location":"#arquitetura-da-solucao","title":"Arquitetura da Solu\u00e7\u00e3o","text":"<p>Nossa loja virtual utiliza diversos servi\u00e7os da AWS para garantir uma experi\u00eancia de compra online completa e eficiente. A arquitetura da solu\u00e7\u00e3o inclui:</p> <ul> <li>AWS Lambda: Fun\u00e7\u00f5es serverless para processamento de dados e l\u00f3gica de neg\u00f3cios.</li> <li>Amazon API Gateway: Cria\u00e7\u00e3o de APIs RESTful para intera\u00e7\u00e3o com a loja virtual.</li> <li>Amazon DynamoDB: Banco de dados NoSQL para armazenamento de dados de produtos, pedidos e clientes.</li> <li>Amazon S3: Armazenamento de objetos para arquivos est\u00e1ticos e notas fiscais.</li> <li>Amazon SNS: Servi\u00e7o de notifica\u00e7\u00e3o para enviar alertas e mensagens.</li> <li>Amazon SES: Servi\u00e7o de e-mail para enviar notifica\u00e7\u00f5es por e-mail.</li> <li>AWS X-Ray: Rastreamento de solicita\u00e7\u00f5es e an\u00e1lise de desempenho.</li> <li>Amazon CloudWatch: Monitoramento de recursos e cria\u00e7\u00e3o de alarmes.</li> <li>AWS CloudFormation: Provisionamento de recursos de forma automatizada e repet\u00edvel.</li> <li>AWS Cognito: Gerenciamento de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o de usu\u00e1rios.</li> </ul>"},{"location":"#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Explore a documenta\u00e7\u00e3o para aprender mais sobre cada recurso da nossa loja virtual e como utiliz\u00e1-los ao m\u00e1ximo. Comece pelo guia de instala\u00e7\u00e3o para configurar a sua loja e come\u00e7ar a vender online!</p> <p>Se tiver alguma d\u00favida ou precisar de ajuda, n\u00e3o hesite em entrar em contato com nossa equipe de suporte.</p>"},{"location":"arquitetura/","title":"Arquitetura","text":"<p>A arquitetura \u00e9 projetada para ser escal\u00e1vel, confi\u00e1vel e segura, utilizando diversos servi\u00e7os da AWS para garantir uma experi\u00eancia de compra online excepcional.</p> <p></p>"},{"location":"arquitetura/#componentes","title":"Componentes","text":"<ul> <li>Amazon S3 (Simple Storage Service): Armazena os arquivos est\u00e1ticos da loja virtual, como HTML, CSS, JavaScript e imagens, al\u00e9m das notas fiscais em formato XML.</li> </ul> <ul> <li>Amazon DynamoDB: Banco de dados NoSQL altamente escal\u00e1vel e flex\u00edvel, utilizado para armazenar informa\u00e7\u00f5es sobre produtos, pedidos e clientes.</li> </ul> <ul> <li>AWS Lambda: Fun\u00e7\u00f5es serverless que executam o c\u00f3digo da aplica\u00e7\u00e3o, como processamento de pedidos, valida\u00e7\u00e3o de dados, gera\u00e7\u00e3o de relat\u00f3rios, etc.</li> </ul> <ul> <li>Amazon API Gateway: Cria uma API RESTful que permite a intera\u00e7\u00e3o com ecommerce a partir de aplicativos externos e da interface do usu\u00e1rio.</li> </ul> <ul> <li> <p>Amazon Cognito: Servi\u00e7o de gerenciamento de identidade que permite autenticar e autorizar usu\u00e1rios, al\u00e9m de gerenciar o cadastro e login de clientes.</p> </li> <li> <p>Amazon SNS (Simple Notification Service): Servi\u00e7o de mensagens pub/sub que envia notifica\u00e7\u00f5es por e-mail (SES) ou SMS para clientes e administradores da loja.</p> </li> <li> <p>Amazon SES (Simple Email Service): Servi\u00e7o de envio de e-mails transacionais, usado para enviar notifica\u00e7\u00f5es de pedidos, confirma\u00e7\u00f5es de cadastro, etc.</p> </li> <li> <p>AWS X-Ray: Servi\u00e7o de rastreamento distribu\u00eddo que ajuda a analisar e depurar solicita\u00e7\u00f5es \u00e0 API Gateway e \u00e0s fun\u00e7\u00f5es Lambda.</p> </li> <li> <p>Amazon CloudWatch: Servi\u00e7o de monitoramento que coleta logs e m\u00e9tricas dos servi\u00e7os da AWS, permitindo acompanhar o desempenho da loja virtual e configurar alarmes.</p> </li> <li> <p>AWS CloudFormation: Servi\u00e7o de infraestrutura como c\u00f3digo (IaC) que permite provisionar e gerenciar os recursos da AWS de forma automatizada e repet\u00edvel.</p> </li> </ul>"},{"location":"arquitetura/#fluxo-de-trabalho","title":"Fluxo de Trabalho","text":"<ol> <li>O cliente acessa a loja virtual atrav\u00e9s de um navegador web.</li> <li>O CloudFront entrega os arquivos est\u00e1ticos (HTML, CSS, JavaScript) armazenados no S3.</li> <li>O cliente interage com a loja virtual, enviando requisi\u00e7\u00f5es \u00e0 API Gateway.</li> <li>A API Gateway invoca as fun\u00e7\u00f5es Lambda para processar as requisi\u00e7\u00f5es.</li> <li>As fun\u00e7\u00f5es Lambda acessam o DynamoDB para ler e gravar dados.</li> <li>As fun\u00e7\u00f5es Lambda podem enviar notifica\u00e7\u00f5es por e-mail (SES) ou SMS (SNS).</li> <li>O X-Ray rastreia as requisi\u00e7\u00f5es e o CloudWatch monitora o desempenho da aplica\u00e7\u00e3o.</li> </ol>"},{"location":"arquitetura/#beneficios-da-arquitetura","title":"Benef\u00edcios da Arquitetura","text":"<ul> <li> <p>Escalabilidade: A arquitetura \u00e9 altamente escal\u00e1vel, pois os servi\u00e7os da AWS podem ser dimensionados automaticamente para lidar com o aumento do tr\u00e1fego e da demanda.</p> </li> <li> <p>Confiabilidade: A redund\u00e2ncia e a alta disponibilidade dos servi\u00e7os da AWS garantem que a loja virtual esteja sempre dispon\u00edvel para os clientes.</p> </li> <li> <p>Seguran\u00e7a: A autentica\u00e7\u00e3o de usu\u00e1rios, a criptografia de dados e o firewall de aplica\u00e7\u00e3o web (WAF) protegem a loja virtual contra amea\u00e7as de seguran\u00e7a.</p> </li> <li> <p>Custo-benef\u00edcio: A arquitetura serverless permite que voc\u00ea pague apenas pelos recursos que utilizar, reduzindo os custos operacionais.</p> </li> </ul> <p>Esta \u00e9 uma vis\u00e3o geral da arquitetura desenvolvida na AWS para o nosso reskilling.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#perguntas-frequentes-faq-loja-virtual-na-aws","title":"Perguntas Frequentes (FAQ) - Loja Virtual na AWS","text":""},{"location":"faq/#geral","title":"Geral","text":"<p>1. Qual a finalidade desta loja virtual?</p> <p>Esta loja virtual foi desenvolvida como um projeto de demonstra\u00e7\u00e3o para ilustrar como construir uma aplica\u00e7\u00e3o de e-commerce escal\u00e1vel e confi\u00e1vel na AWS. Ela permite gerenciar produtos, pedidos, clientes, eventos, notas fiscais e muito mais.</p> <p>2. Quais as tecnologias utilizadas na constru\u00e7\u00e3o da loja?</p> <p>A loja virtual utiliza o AWS CDK (Cloud Development Kit) para definir a infraestrutura em TypeScript, al\u00e9m de outros servi\u00e7os da AWS, como Lambda, API Gateway, DynamoDB, S3, SNS, SES, Cognito, X-Ray e CloudWatch.</p>"},{"location":"faq/#funcionalidades","title":"Funcionalidades","text":"<p>4. Como fa\u00e7o para adicionar produtos \u00e0 minha loja?</p> <p>Voc\u00ea pode adicionar produtos utilizando a API REST da loja virtual. Consulte a se\u00e7\u00e3o \"Refer\u00eancia da API\" na documenta\u00e7\u00e3o para obter mais informa\u00e7\u00f5es sobre os endpoints e par\u00e2metros necess\u00e1rios.</p> <p>5. Como os clientes podem fazer pedidos?</p> <p>Os clientes podem fazer pedidos atrav\u00e9s da interface web da loja virtual, que ser\u00e1 constru\u00edda utilizando os arquivos est\u00e1ticos armazenados no Amazon S3.</p> <p>Fonte: *Chat Copilot</p> <p>Para adicionar uma camada de frontend simples ao projeto AWS CDK TypeScript, voc\u00ea pode seguir estes passos:</p> <ol> <li> <p>Escolha uma Tecnologia de Frontend: Decida qual framework ou biblioteca voc\u00ea deseja usar para o frontend (por exemplo, React, Angular, Vue.js).</p> </li> <li> <p>Crie o Projeto Frontend: Crie um novo diret\u00f3rio para o projeto frontend dentro do seu projeto CDK e inicialize o projeto frontend usando a ferramenta de linha de comando do framework escolhido.</p> </li> <li> <p>Construa a Interface do Usu\u00e1rio: Desenvolva suas p\u00e1ginas, componentes e estilos conforme necess\u00e1rio.</p> </li> <li> <p>Integre com o Backend: Use o AWS Amplify ou chamadas diretas de API (fetch, axios etc.) para conectar seu frontend com os servi\u00e7os backend (por exemplo, API Gateway, Lambda).</p> </li> <li> <p>Hospede o Frontend: Utilize um servi\u00e7o de hospedagem compat\u00edvel com SPA (Single Page Application) como o Amazon S3 junto com o Amazon CloudFront para servir e distribuir o frontend.</p> </li> </ol> <p>6. Como posso acompanhar o status dos pedidos?</p> <p>Voc\u00ea pode acompanhar o status dos pedidos atrav\u00e9s da API REST ou da interface web da loja virtual.</p> <p>7. Como funciona o sistema de autentica\u00e7\u00e3o?</p> <p>O sistema de autentica\u00e7\u00e3o utiliza o Amazon Cognito para gerenciar o cadastro, login e logout dos usu\u00e1rios.</p> <p>8. Como posso importar notas fiscais?</p> <p>Voc\u00ea pode importar notas fiscais em formato XML utilizando a API REST da loja virtual.</p>"},{"location":"faq/#aws","title":"AWS","text":"<p>9. Quais os principais servi\u00e7os da AWS utilizados neste projeto?</p> <p>Os principais servi\u00e7os utilizados s\u00e3o:</p> <ul> <li>Lambda: Para processamento de dados e l\u00f3gica de neg\u00f3cios.</li> <li>API Gateway: Para criar a API REST da loja virtual.</li> <li>DynamoDB: Para armazenar dados de produtos, pedidos e clientes.</li> <li>S3: Para armazenar arquivos est\u00e1ticos e notas fiscais.</li> <li>SNS: Para enviar notifica\u00e7\u00f5es por e-mail (SES) ou SMS.</li> <li>Cognito: Para gerenciar a autentica\u00e7\u00e3o de usu\u00e1rios.</li> </ul> <p>10. Como posso monitorar o desempenho da minha loja virtual?</p> <p>Voc\u00ea pode utilizar o Amazon CloudWatch para monitorar o desempenho da sua loja virtual, criar alarmes e visualizar logs.</p> <p>11. Como posso garantir a seguran\u00e7a da minha loja virtual?</p> <p>A seguran\u00e7a da sua loja virtual \u00e9 garantida atrav\u00e9s de diversas camadas, como:</p> <ul> <li>Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o: Utilizando o Amazon Cognito para controlar o acesso aos recursos da loja.</li> <li>Criptografia: Criptografando os dados em repouso (DynamoDB, S3) e em tr\u00e2nsito (HTTPS).</li> <li>Firewall de aplica\u00e7\u00e3o web (WAF): Protegendo a API REST contra ataques comuns.</li> <li>Monitoramento: Utilizando o CloudWatch para detectar atividades suspeitas.</li> </ul>"},{"location":"faq/#suporte","title":"Suporte","text":"<p>12. Onde posso obter ajuda para configurar e utilizar a loja virtual?</p> <p>Se voc\u00ea tiver alguma d\u00favida ou precisar de ajuda, consulte a documenta\u00e7\u00e3o completa da loja virtual ou entre em contato com nossa equipe de suporte.</p>"},{"location":"guia_instalacao/","title":"Guia de Instala\u00e7\u00e3o","text":""},{"location":"guia_instalacao/#guia-de-instalacao-da-loja-virtual-aws-sdk-e-typescript","title":"Guia de Instala\u00e7\u00e3o da Loja Virtual (AWS SDK e TypeScript)","text":"<p>Este guia detalhado ir\u00e1 auxiliar voc\u00ea a configurar e instalar nossa loja virtual em sua pr\u00f3pria conta da AWS, utilizando o AWS SDK para JavaScript e TypeScript. Ao final, voc\u00ea ter\u00e1 uma plataforma de e-commerce completa e funcional, pronta para come\u00e7ar a vender seus produtos online.</p> <p>Pr\u00e9-requisitos:</p> <ul> <li>Conta AWS: Uma conta ativa na Amazon Web Services (AWS) para provisionar os recursos necess\u00e1rios.</li> <li>Node.js e npm (ou yarn): Para instalar as depend\u00eancias do projeto e executar os scripts de implanta\u00e7\u00e3o.</li> <li>AWS CLI: A interface de linha de comando da AWS ser\u00e1 utilizada para algumas etapas da instala\u00e7\u00e3o. Certifique-se de ter a AWS CLI instalada e configurada em sua m\u00e1quina local.</li> <li>Conhecimento b\u00e1sico de AWS, TypeScript e infraestrutura como c\u00f3digo: Familiaridade com os servi\u00e7os da AWS (S3, DynamoDB, Lambda, API Gateway, etc.), a linguagem TypeScript e conceitos de IaC (Infrastructure as Code) ser\u00e3o \u00fateis.</li> </ul> <p>Passos de Instala\u00e7\u00e3o:</p> <ol> <li> <p>Clone o reposit\u00f3rio: <code>bash    git clone https://github.com/seu-usuario/sua-loja-virtual.git    cd sua-loja-virtual</code></p> </li> <li> <p>Instale as depend\u00eancias: <code>bash    npm install # ou yarn install</code></p> </li> <li> <p>Crie um bucket S3: Utilize o AWS SDK ou a AWS CLI para criar um bucket S3 que armazenar\u00e1 os arquivos est\u00e1ticos da sua loja (HTML, CSS, JavaScript, imagens, etc.). Anote o nome do bucket.</p> </li> <li> <p>Fa\u00e7a o upload dos arquivos est\u00e1ticos: Utilize o AWS SDK para fazer o upload dos arquivos est\u00e1ticos para o bucket S3 criado.</p> </li> <li> <p>Configure o AWS Cognito:</p> </li> <li>Crie um User Pool: Defina atributos de usu\u00e1rio, pol\u00edticas de senha e outros detalhes para gerenciar a autentica\u00e7\u00e3o do usu\u00e1rio.</li> <li>Crie um Identity Pool: Conecte seu User Pool a um Identity Pool para fornecer acesso federado aos recursos da AWS.</li> <li> <p>Crie um App Client: Configure um cliente de aplicativo para permitir que sua loja virtual interaja com o Cognito.</p> </li> <li> <p>Crie um arquivo de configura\u00e7\u00e3o (opcional):</p> </li> <li>Crie um arquivo <code>.env</code> na raiz do projeto para armazenar as configura\u00e7\u00f5es da AWS (regi\u00e3o, chaves de acesso, etc.) e os IDs do bucket S3, User Pool e App Client do Cognito.</li> <li> <p>Utilize a biblioteca dotenv para carregar as vari\u00e1veis de ambiente do arquivo <code>.env</code>.</p> </li> <li> <p>Implante a infraestrutura:</p> </li> <li>Utilize o AWS CDK (Cloud Development Kit) para definir a infraestrutura da sua loja virtual (DynamoDB, Lambda, API Gateway, etc.) em TypeScript.</li> <li> <p>Execute o comando <code>cdk deploy</code> para implantar a infraestrutura na sua conta da AWS.</p> </li> <li> <p>Acesse a sua loja virtual:</p> </li> <li>Ap\u00f3s a implanta\u00e7\u00e3o, o CDK fornecer\u00e1 a URL da sua loja virtual. Acesse-a para ver sua loja em funcionamento.</li> </ol> <p>Estrutura do Projeto (Exemplo):</p> <pre><code>sua-loja-virtual/\n\u251c\u2500\u2500 bin/             # Arquivo de inicializa\u00e7\u00e3o do CDK\n\u251c\u2500\u2500 lib/             # Pilhas do CDK (stacks) e constru\u00e7\u00f5es (constructs)\n\u2502   \u251c\u2500\u2500 loja-virtual-stack.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 lambda-functions/ # Fun\u00e7\u00f5es Lambda (em TypeScript)\n\u2502   \u251c\u2500\u2500 get-produtos.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 public/          # Arquivos est\u00e1ticos (HTML, CSS, JS, imagens) \n\u251c\u2500\u2500 cdk.json         # Arquivo de configura\u00e7\u00e3o do CDK\n\u251c\u2500\u2500 package.json     # Arquivos de depend\u00eancias do projeto\n\u2514\u2500\u2500 tsconfig.json    # Arquivo de configura\u00e7\u00e3o do TypeScript\n</code></pre> <p>Observa\u00e7\u00f5es:</p> <ul> <li>Este guia \u00e9 um ponto de partida. Adapte-o \u00e0s suas necessidades e \u00e0 estrutura do seu projeto.</li> <li>Consulte a documenta\u00e7\u00e3o oficial da AWS para obter informa\u00e7\u00f5es detalhadas sobre os servi\u00e7os utilizados.</li> <li>Utilize boas pr\u00e1ticas de seguran\u00e7a ao configurar o acesso aos seus recursos da AWS.</li> </ul> <p>Com este guia e a estrutura de projeto sugerida, voc\u00ea estar\u00e1 pronto para construir e implantar sua loja virtual na AWS, aproveitando ao m\u00e1ximo os recursos do SDK e do TypeScript para criar uma aplica\u00e7\u00e3o escal\u00e1vel, segura e eficiente.</p>"},{"location":"referencia_api/","title":"Refer\u00eancia da API","text":""},{"location":"referencia_api/#referencia-da-api","title":"Refer\u00eancia da API","text":"<p>Nossa API RESTful permite que voc\u00ea interaja com os recursos da sua loja virtual de forma program\u00e1tica, facilitando a integra\u00e7\u00e3o com outros sistemas e a automa\u00e7\u00e3o de tarefas.</p>"},{"location":"referencia_api/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<p>Todas as requisi\u00e7\u00f5es \u00e0 API exigem autentica\u00e7\u00e3o utilizando tokens de acesso gerados pelo Amazon Cognito. Voc\u00ea pode obter um token de acesso fazendo login na sua conta de usu\u00e1rio e utilizando o endpoint de autentica\u00e7\u00e3o do Cognito.</p> <p>Exemplo de cabe\u00e7alho de autentica\u00e7\u00e3o:</p> <pre><code>Authorization: Bearer SEU_TOKEN_DE_ACESSO\n</code></pre>"},{"location":"referencia_api/#endpoints","title":"Endpoints","text":""},{"location":"referencia_api/#gerenciamento-de-produtos","title":"Gerenciamento de Produtos","text":"<ul> <li><code>GET /produtos</code>: Retorna uma lista de todos os produtos.</li> <li><code>GET /produtos/{id}</code>: Retorna os detalhes de um produto espec\u00edfico.</li> <li><code>POST /produtos</code>: Cria um novo produto.</li> <li><code>PUT /produtos/{id}</code>: Atualiza os detalhes de um produto existente.</li> <li><code>DELETE /produtos/{id}</code>: Exclui um produto.</li> </ul>"},{"location":"referencia_api/#gerenciamento-de-pedidos","title":"Gerenciamento de Pedidos","text":"<ul> <li><code>GET /pedidos</code>: Retorna uma lista de todos os pedidos.</li> <li><code>GET /pedidos/{id}</code>: Retorna os detalhes de um pedido espec\u00edfico.</li> <li><code>POST /pedidos</code>: Cria um novo pedido.</li> <li><code>PUT /pedidos/{id}</code>: Atualiza o status de um pedido existente.</li> </ul>"},{"location":"referencia_api/#gerenciamento-de-eventos","title":"Gerenciamento de Eventos","text":"<ul> <li><code>POST /eventos</code>: Cria um novo evento personalizado.</li> </ul>"},{"location":"referencia_api/#importacao-de-notas-fiscais","title":"Importa\u00e7\u00e3o de Notas Fiscais","text":"<ul> <li><code>POST /notas_fiscais</code>: Importa uma nota fiscal em formato XML.</li> </ul>"},{"location":"referencia_api/#exemplos-de-requisicao-e-resposta","title":"Exemplos de Requisi\u00e7\u00e3o e Resposta","text":"<p>Exemplo de requisi\u00e7\u00e3o GET:</p> <pre><code>GET /produtos/12345\n</code></pre> <p>Exemplo de resposta GET:</p> <pre><code>{\n  \"id\": \"12345\",\n  \"nome\": \"Camiseta Polo\",\n  \"descricao\": \"Camiseta polo masculina, 100% algod\u00e3o.\",\n  \"preco\": 49.90,\n  \"estoque\": 50\n}\n</code></pre> <p>Exemplo de requisi\u00e7\u00e3o POST:</p> <pre><code>POST /produtos\nContent-Type: application/json\n\n{\n  \"nome\": \"Cal\u00e7a Jeans\",\n  \"descricao\": \"Cal\u00e7a jeans feminina, corte reto.\",\n  \"preco\": 89.90,\n  \"estoque\": 30\n}\n</code></pre> <p>Exemplo de resposta POST:</p> <pre><code>{\n  \"mensagem\": \"Produto criado com sucesso!\",\n  \"id\": \"67890\"\n}\n</code></pre>"},{"location":"referencia_api/#codigos-de-status-http","title":"C\u00f3digos de Status HTTP","text":"<ul> <li>200 OK: A requisi\u00e7\u00e3o foi bem-sucedida.</li> <li>201 Created: O recurso foi criado com sucesso.</li> <li>400 Bad Request: A requisi\u00e7\u00e3o est\u00e1 malformada ou inv\u00e1lida.</li> <li>401 Unauthorized: A autentica\u00e7\u00e3o \u00e9 necess\u00e1ria para acessar o recurso.</li> <li>403 Forbidden: Voc\u00ea n\u00e3o tem permiss\u00e3o para acessar o recurso.</li> <li>404 Not Found: O recurso n\u00e3o foi encontrado.</li> <li>500 Internal Server Error: Ocorreu um erro no servidor.</li> </ul>"},{"location":"referencia_api/#erros","title":"Erros","text":"<p>Em caso de erro, a API retornar\u00e1 uma resposta JSON com o c\u00f3digo de status HTTP correspondente e uma mensagem de erro descritiva.</p> <p>Exemplo de resposta de erro:</p> <pre><code>{\n  \"error\": \"Produto n\u00e3o encontrado\"\n}\n</code></pre>"},{"location":"referencia_api/#limites-de-taxa","title":"Limites de Taxa","text":"<p>A API possui limites de taxa para evitar o uso excessivo e garantir a disponibilidade para todos os usu\u00e1rios. Se voc\u00ea exceder os limites, receber\u00e1 uma resposta com o c\u00f3digo de status 429 Too Many Requests.</p>"},{"location":"referencia_api/#versionamento","title":"Versionamento","text":"<p>A API est\u00e1 sujeita a altera\u00e7\u00f5es e melhorias. Para garantir a compatibilidade com seus sistemas, recomendamos que voc\u00ea utilize o versionamento da API. A vers\u00e3o atual da API \u00e9 1.0.</p>"},{"location":"referencia_api/#suporte","title":"Suporte","text":"<p>Se voc\u00ea tiver alguma d\u00favida ou precisar de ajuda, entre em contato com nossa equipe de suporte.</p>"},{"location":"tutorial_basico/","title":"Tutorial B\u00e1sico","text":""},{"location":"tutorial_basico/#tutorial-completo-configurando-codigo-typescript-com-aws-cdk-e-lambda-layers","title":"Tutorial Completo: Configurando C\u00f3digo TypeScript com AWS CDK e Lambda Layers","text":"<p>Este tutorial aborda a configura\u00e7\u00e3o de um projeto AWS CDK (Cloud Development Kit) em TypeScript, integrando Lambda Layers para organizar e reutilizar o c\u00f3digo das suas fun\u00e7\u00f5es Lambda.</p>"},{"location":"tutorial_basico/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>A estrutura de arquivos proposta demonstra uma organiza\u00e7\u00e3o clara, separando a infraestrutura (CDK) das camadas Lambda:</p> <pre><code>projeto_cdk/\n\u251c\u2500\u2500 bin/             \n\u2502   \u2514\u2500\u2500 app.ts       \n\u251c\u2500\u2500 lib/             \n\u2502   \u251c\u2500\u2500 productsApp-stack.ts\n\u2502   \u251c\u2500\u2500 ecommerceApi-stack.ts\n\u2502   \u251c\u2500\u2500 productsAppLayers-stack.ts\n\u2502   \u251c\u2500\u2500 eventsDdb-stack.ts\n\u2502   \u251c\u2500\u2500 ordersAppLayers-stack.ts\n\u2502   \u251c\u2500\u2500 ordersApp-stack.ts\n\u2502   \u251c\u2500\u2500 invoiceWSApi-stack.ts\n\u2502   \u251c\u2500\u2500 invoicesAppLayers-stack.ts\n\u2502   \u2514\u2500\u2500 auditEventBus-stack.ts\n\u251c\u2500\u2500 lambda-layers/\n\u2502   \u251c\u2500\u2500 audit/       \n\u2502   \u251c\u2500\u2500 auth/       \n\u2502   \u251c\u2500\u2500 invoices/     \n\u2502   \u251c\u2500\u2500 orders/      \n\u2502   \u2514\u2500\u2500 products/\n\u251c\u2500\u2500 cdk.json          \n\u2514\u2500\u2500 package.json   \n</code></pre>"},{"location":"tutorial_basico/#configuracao-do-projeto","title":"Configura\u00e7\u00e3o do Projeto","text":"<ol> <li>Crie o projeto:</li> <li>Se voc\u00ea ainda n\u00e3o tiver um projeto CDK, crie um novo:      <code>bash      mkdir projeto_cdk      cd projeto_cdk      cdk init app --language typescript</code></li> <li> <p>Caso j\u00e1 tenha um projeto, navegue at\u00e9 o diret\u00f3rio do projeto.</p> </li> <li> <p>Instale as depend\u00eancias: <code>bash    npm install aws-cdk-lib constructs @aws-cdk/aws-lambda @aws-cdk/aws-apigateway @aws-cdk/aws-dynamodb @aws-cdk/aws-s3 @aws-cdk/aws-sns @aws-cdk/aws-ses @aws-cdk/aws-cognito @aws-cdk/aws-xray @aws-cdk/aws-cloudwatch</code></p> </li> <li> <p>Crie as camadas Lambda:</p> </li> <li>Dentro de <code>lambda-layers/</code>, crie uma pasta para cada camada (ex: <code>audit/</code>, <code>auth/</code>, <code>invoices/</code>, etc.).</li> <li>Em cada pasta, crie os arquivos <code>.ts</code> com o c\u00f3digo das suas fun\u00e7\u00f5es Lambda.</li> <li> <p>Compile o c\u00f3digo TypeScript:      <code>bash      tsc</code></p> </li> <li> <p>Configure as pilhas (stacks):</p> </li> <li> <p>Em <code>bin/app.ts</code>:</p> <ul> <li>Importe as pilhas do CDK que voc\u00ea criou.</li> <li>Crie inst\u00e2ncias das pilhas, passando as configura\u00e7\u00f5es necess\u00e1rias.</li> <li>Exemplo:</li> </ul> <p>```    import * as cdk from 'aws-cdk-lib';    import { ProductsAppStack } from '../lib/productsApp-stack';    import { ECommerceApiStack } from '../lib/ecommerceApi-stack';    // ... (outras importa\u00e7\u00f5es)</p> <p>const app = new cdk.App();    new ProductsAppStack(app, 'ProductsAppStack');    new ECommerceApiStack(app, 'ECommerceApiStack');    // ... (outras inst\u00e2ncias de pilhas)</p> <p><code>- Em cada arquivo de pilha (ex: `lib/productsApp-stack.ts`):  * Crie constru\u00e7\u00f5es (constructs) para cada recurso da AWS que voc\u00ea precisa (Lambdas, DynamoDB, API Gateway, etc.).  * Use os construtores `@aws-cdk/aws-lambda.LayerVersion` para definir suas camadas Lambda.  * Exemplo:</code>typescript    import * as lambda from '@aws-cdk/aws-lambda';    // ... (outras importa\u00e7\u00f5es)</p> <p>const auditLayer = new lambda.LayerVersion(this, 'AuditLayer', {      code: lambda.Code.fromAsset('lambda-layers/audit'),      compatibleRuntimes: [lambda.Runtime.NODEJS_14_X]     });</p> <p>const myLambdaFunction = new lambda.Function(this, 'MyFunction', {      // ... (configura\u00e7\u00e3o da fun\u00e7\u00e3o Lambda)      layers: [auditLayer]    });    ```</p> </li> <li> <p>Implante: <code>bash    cdk bootstrap    cdk deploy</code></p> </li> </ol>"},{"location":"tutorial_basico/#dicas-e-boas-praticas","title":"Dicas e Boas Pr\u00e1ticas","text":"<ul> <li>Mantenha as camadas pequenas: Camadas muito grandes podem aumentar o tempo de inicializa\u00e7\u00e3o das fun\u00e7\u00f5es Lambda.</li> <li>Gerencie depend\u00eancias: Use um gerenciador de pacotes como npm para gerenciar as depend\u00eancias das suas camadas.</li> <li>Teste localmente: Teste suas fun\u00e7\u00f5es Lambda localmente antes de implant\u00e1-las na AWS.</li> <li>Automatize o deploy: Utilize ferramentas de CI/CD para automatizar a implanta\u00e7\u00e3o da sua infraestrutura.</li> <li>Monitore: Utilize o Amazon CloudWatch para monitorar o desempenho e os logs das suas fun\u00e7\u00f5es Lambda e outros recursos.</li> </ul> <p>Com este guia completo, voc\u00ea estar\u00e1 apto a configurar seu projeto com o AWS CDK e Lambda Layers em TypeScript, otimizando a estrutura do seu c\u00f3digo e facilitando o desenvolvimento e a implanta\u00e7\u00e3o de aplica\u00e7\u00f5es serverless na AWS.</p> <p>Cr\u00e9ditos: Curso Udemy - AWS Serverless com TypeScript e AWS Cloud Development Kit </p>"}]}